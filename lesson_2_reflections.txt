(my own) How can I find when a bug is introduced?
  - by using git log and:
      1) looking thought commit comments for possible flags of changes
	  2) testing prior commits to narrow-down when a bug was introduced
	      2b) then once pinpointed to commit, git diff between previous and current version
		  
(my own) Really like the concept map / quiz idea for FMA, etc...
   - e.g. show relationships and empty boxes and make people fill them out and then provide feedback
		  
What happens when you initialize a repository? Why do you need to do it?
	- git creates a .git directory and starts tracking the directory (though no commits are done yet / no files added)
	- use git status to confirm

How is the staging area different from the working directory and the repository?
	- staging is what you do want to potentially commit, before it's committed
	? if a file is already being tracked, can you remove it / could you still add it again? (we'll find out)
	
What value do you think it offers?
    - lets you prep for a commit

How can you use the staging area to make sure you have one commit per logical
change?
    - review the contents of it before committing and you have to manually add files ot the staging area
	- for a big project that seems like it might be a pain...wonder how to do that enmass?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	- when doing some experimental work that would tear up existing code
	- when I'm going to keep the current path going but want to try some things 'on the side'
	- especially when collaborating with others so that the master is always "known good" or at least "thought good" paths

How do the diagrams help you visualize the branch structure?
    - I can see when braches occured, what commits I can't get to directly from the current branch (if any), etc...
	- annoying I can't just see a full map though (maybe in the windows version?
	
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    - the changes in each is merged and the current branch name/label is given to the merged node...then the other branch label can be removed because you can get to all the changes from one branch
    - the diagram shows the history of from what parent a branch started so you can see reachability

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
    - Pros: can be very fast for obvious edits, automatically tries to call out conflicts (which manually you might miss)
	- Cons: could result in uncompilable code because of emergent or not straight-forward interdependencies.